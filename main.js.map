{"version":3,"sources":["./projects/ng-badges-showcase/src/app/app.module.ts","./projects/ng-badges-showcase/src/app/app.component.ts","./projects/ng-badges-showcase/src/app/app.component.html","./projects/ngx-badges/src/lib/ngx-badges.component.ts","./projects/ng-badges-showcase/src/main.ts","./projects/ngx-badges/src/lib/ngx-badges.service.ts","./projects/ng-badges-showcase/src/environments/environment.ts","./projects/ngx-badges/src/public-api.ts","./projects/ngx-badges/src/lib/ngx-badges.module.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgxBadgesModule } from 'projects/ngx-badges/src/public-api';\nimport { AppComponent } from './app.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule, NgxBadgesModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'ng-badges-showcase';\n}\n","PRIMARY: <ngx-badges text=\"PRIMARY\" type=\"PRIMARY\"></ngx-badges>\nSUCCESS: <ngx-badges text=\"SUCCESS\" type=\"SUCCESS\"></ngx-badges>\nWARN: <ngx-badges text=\"WARN\" type=\"WARN\"></ngx-badges>\nERROR: <ngx-badges text=\"ERROR\" type=\"ERROR\"></ngx-badges>\nINFO: <ngx-badges text=\"INFO\" type=\"INFO\"></ngx-badges>\nDEFAULT: <ngx-badges text=\"DEFAULT\" type=\"DEFAULT\"></ngx-badges>","import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-badges',\n  template: `\n<span [class]=\"styleClass\">{{text}}</span>\n  `,\n  styles: [`\n    .badge-primary {\n      background-color: #337ab7!important;\n}\n  .badge-error {\n    background-color: #d9534f!important;\n        }\n        .badge-default {\n  background-color: #777!important;\n}\n        .badge-info {\n  background-color: #5bc0de!important;\n}\n        .badge-warning {\n  background-color: #f0ad4e!important;\n}\n        .badge-success {\n  background-color: #5cb85c!important;\n}\n        .badge {\n  display: inline;\n  padding: .2em .6em .3em;\n  font-size: 75 %;\n  font-weight: 700;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  border-radius: .25em;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n}\n  `]\n})\nexport class NgxBadgesComponent implements OnInit {\n  @Input() text: string = '';\n  styleClass: string = 'badge';\n  @Input() type: string = '';\n  constructor() { }\n\n  ngOnInit(): void {\n    if (this.type) {\n      if (this.type.toUpperCase().indexOf('SUCCESS') !=-1) { this.styleClass += ' badge-success'; }\n      else if (this.type.toUpperCase().indexOf('ERROR') !=-1) { this.styleClass += ' badge-error'; }\n      else if (this.type.toUpperCase().indexOf('INFO') !=-1) { this.styleClass += ' badge-info' }\n      else if (this.type.toUpperCase().indexOf('PRIMARY') !=-1) { this.styleClass += ' badge-primary' }\n      else if (this.type.toUpperCase().indexOf('DEFAULT') !=-1) { this.styleClass += ' badge-default' }\n      else if (this.type.toUpperCase().indexOf('WARN') !=-1) { this.styleClass += ' badge-warning' }\n      else { this.styleClass += ' badge-primary' }\n    }\n    else {\n      this.styleClass += ' badge-default';\n    }\n  }\n\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxBadgesService {\n\n  constructor() { }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","/*\n * Public API Surface of ngx-badges\n */\n\nexport * from './lib/ngx-badges.service';\nexport * from './lib/ngx-badges.component';\nexport * from './lib/ngx-badges.module';\n","import { NgModule } from '@angular/core';\nimport { NgxBadgesComponent } from './ngx-badges.component';\n\n\n\n@NgModule({\n  declarations: [\n    NgxBadgesComponent\n  ],\n  imports: [\n  ],\n  exports: [\n    NgxBadgesComponent\n  ]\n})\nexport class NgxBadgesModule { }\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}